Definitions = definitions:(Definition / Comment / "\n")* {
  return definitions
  	.filter((definition) => definition && (typeof definition !== 'string'));
}
Definition = "define" _ identifier:Identifier _ fields:Fields {
  return {
    identifier,
    fields
  };
}

Comment = "//" comment:([^\n]+) _ {
  return null;
}

Fields = "{" _ fields:(Field / Comment)* _ "}" {
  return fields.filter((field) => field);
}

Field = mutability:FieldMutability _ field:FieldIdentifier _ ":" _ type:Types  _ {
  return { field, ...type, ...mutability }
}

Types = type:(PrimitiveType / ArrayType / MapType / ReferenceType) nullable:FieldNullability {
  return { ...type, ...nullable };
}

ArrayType = "Array<" type:Types ">" {
  return { primitive: true, type: "Array", generics: [ type ] }
}
MapType = "Map<" _ type1:Types _ "," _ type2:Types _ ">" {
  return { primitive: true, type: "Map", generics: [ type1, type2] }
}
PrimitiveType = ("Long" / "Int" / "Short" / "Byte" / "Double" / "Float" / "Boolean" / "String") {
  return { primitive: true, type: text(), generics: [] };
}
ReferenceType = identifier:Identifier {
	return { primitive: false, type: identifier, generics: [] }
}
FieldMutability = ("var" / "val")Â {
  return { mutable: text() === "var" }
}
FieldNullability = nullable:"?"? {
  return { nullable: nullable == "?" };
}

FieldIdentifier = [_A-Za-z0-9]+ {
  return text();
}

Identifier = [A-Z][a-z0-9]* {
  return text();
}

_ "whitespace"
  = [ \t\n\r]*

